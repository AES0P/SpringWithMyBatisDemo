<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://mybatis.org/schema/mybatis-spring
       http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- ...引入jdbc数据源 -->
    <import resource="Datasource.xml"/>

    <!-- ...创建SqlSessionFactory，同时指定数据源，这是为后面的mapper或者SqlSessionTemplate服务的-->

    <!--使用 MyBatis-Spring 之后，不再需要直接使用 SqlSessionFactory 了，因为bean可以被注入一个线程安全的 SqlSession，
        它能基于 Spring 的事务配置来自动提交、回滚、关闭 session。
        所以这里的sqlSessionFactory是为后面的mapper和session服务的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--可以是任意的 DataSource 对象，它的配置方法和其它 Spring 数据库连接是一样的。-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mybatis -->
        <property name="configLocation" value="classpath:MyBatis-Config.xml"/>
        <!--&lt;!&ndash;        <property name="mapperLocations" value="classpath*:mappers/**/*.xml"/>&ndash;&gt;如果通过XML设置mapper，则需要指明路径-->
    </bean>

    <!-- ...创建SqlSessionTemplate -->

    <!--    使用 SqlSessionFactory 来创建 sqlSessionTemplate。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，-->
    <!--    最后，当不再需要它的时候，你可以关闭 session。-->
    <!--    而使用 MyBatis-Spring 之后，你不再需要直接使用 SqlSessionFactory 了，因为你的 bean 可以被注入一个线程安全的 SqlSession，-->
    <!--    它能基于 Spring 的事务配置来自动提交、回滚、关闭 session。-->

    <bean id="sqlSessionTemplate"
          class="org.mybatis.spring.SqlSessionTemplate"><!--SqlSessionTemplate 是线程安全的，可以被多个 DAO 或映射器所共享使用-->
        <constructor-arg index="0"
                         ref="sqlSessionFactory"/>
        <constructor-arg index="1"
                         value="BATCH"/><!--接收 ExecutorType 参数的构造方法。这允许你使用如下 Spring 配置来批量创建对象，例如批量创建一些 SqlSession：-->
    </bean>

    <!-- ...创建数据映射器，数据映射器必须为接口,这里展示手动配置和自动扫描两种方式-->

    <!-- ...手动配置-->
    <!--    &lt;!&ndash;    如果不通过XML去设置mapper，则可通过下列用法实现&ndash;&gt;-->
    <!--    &lt;!&ndash;    通常，在 MyBatis-Spring 中，你不需要直接使用 SqlSessionFactoryBean 或对应的 SqlSessionFactory。&ndash;&gt;-->
    <!--    &lt;!&ndash;    相反，session 的工厂 bean 将会被注入到 MapperFactoryBean 或其它继承于 SqlSessionDaoSupport 的 DAO（Data Access Object，数据访问对象）中。&ndash;&gt;-->
    <!--    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--        <property name="mapperInterface" value="com.hzero.demo.mybatis.mapper.UserMapper"/>-->
    <!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--        &lt;!&ndash; 如果同时配置sqlSessionTemplate和SqlSessionFactory，将优先使用sqlSessionTemplate &ndash;&gt;-->
    <!--        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/>-->
    <!--    </bean>-->

    <!-- ...自动扫描-->
    <!-- 不需要为 <mybatis:scan/> 指定 SqlSessionFactory 或 SqlSessionTemplate，这是因为它将使用能够被自动注入的 MapperFactoryBean。-->
    <!-- 但如果你正在使用多个数据源（DataSource），自动注入可能不适合你。在这种情况下，你可以使用 factory-ref 或 template-ref 属性指定你想使用的 bean 名称-->
    <mybatis:scan base-package="com.hzero.demo.mybatis.mapper"/>


</beans>
